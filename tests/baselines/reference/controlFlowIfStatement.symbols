=== tests/cases/conformance/controlFlow/controlFlowIfStatement.ts ===

let x: string | number | boolean | RegExp;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 1, 3))
>RegExp : Symbol(RegExp, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))

let cond: boolean;
>cond : Symbol(cond, Decl(controlFlowIfStatement.ts, 2, 3))

x = /a/;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 1, 3))

if (x /* RegExp */, (x = true)) {
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 1, 3))
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 1, 3))

    x; // boolean
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 1, 3))

    x = "";
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 1, 3))
}
else {
    x; // boolean
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 1, 3))

    x = 42;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 1, 3))
}
x; // string | number
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 1, 3))

function a() {
>a : Symbol(a, Decl(controlFlowIfStatement.ts, 13, 2))

    let x: string | number;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 16, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowIfStatement.ts, 2, 3))

        x = 42;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 16, 7))
    }
    else {
        x = "";
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 16, 7))

        return;
    }
    x; // number
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 16, 7))
}
function b() {
>b : Symbol(b, Decl(controlFlowIfStatement.ts, 25, 1))

    let x: string | number;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 27, 7))

    if (cond) {
>cond : Symbol(cond, Decl(controlFlowIfStatement.ts, 2, 3))

        x = 42;
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 27, 7))

        throw "";
    }
    else {
        x = "";
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 27, 7))
    }
    x; // string
>x : Symbol(x, Decl(controlFlowIfStatement.ts, 27, 7))
}
function c<T>(data: string | T): T {
>c : Symbol(c, Decl(controlFlowIfStatement.ts, 36, 1))
>T : Symbol(T, Decl(controlFlowIfStatement.ts, 37, 11))
>data : Symbol(data, Decl(controlFlowIfStatement.ts, 37, 14))
>T : Symbol(T, Decl(controlFlowIfStatement.ts, 37, 11))
>T : Symbol(T, Decl(controlFlowIfStatement.ts, 37, 11))

    if (typeof data === 'string') {
>data : Symbol(data, Decl(controlFlowIfStatement.ts, 37, 14))

        return JSON.parse(data);
>JSON.parse : Symbol(JSON.parse, Decl(lib.d.ts, --, --))
>JSON : Symbol(JSON, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>parse : Symbol(JSON.parse, Decl(lib.d.ts, --, --))
>data : Symbol(data, Decl(controlFlowIfStatement.ts, 37, 14))
    }
    else {
        return data;
>data : Symbol(data, Decl(controlFlowIfStatement.ts, 37, 14))
    }
}
function d<T extends string>(data: string | T): never {
>d : Symbol(d, Decl(controlFlowIfStatement.ts, 44, 1))
>T : Symbol(T, Decl(controlFlowIfStatement.ts, 45, 11))
>data : Symbol(data, Decl(controlFlowIfStatement.ts, 45, 29))
>T : Symbol(T, Decl(controlFlowIfStatement.ts, 45, 11))

    if (typeof data === 'string') {
>data : Symbol(data, Decl(controlFlowIfStatement.ts, 45, 29))

        throw new Error('will always happen');
>Error : Symbol(Error, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
    }
    else {
        return data;
>data : Symbol(data, Decl(controlFlowIfStatement.ts, 45, 29))
    }
}

