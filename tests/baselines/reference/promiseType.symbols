=== tests/cases/compiler/promiseType.ts ===
declare var p: Promise<boolean>;
>p : Symbol(p, Decl(promiseType.ts, 0, 11))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))

const a = p.then();
>a : Symbol(a, Decl(promiseType.ts, 2, 5))
>p.then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))
>then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))

const b = p.then(b => 1);
>b : Symbol(b, Decl(promiseType.ts, 3, 5))
>p.then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))
>then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>b : Symbol(b, Decl(promiseType.ts, 3, 17))

const c = p.then(b => 1, e => 'error');
>c : Symbol(c, Decl(promiseType.ts, 4, 5))
>p.then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))
>then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>b : Symbol(b, Decl(promiseType.ts, 4, 17))
>e : Symbol(e, Decl(promiseType.ts, 4, 24))

const d = p.then(b => 1, e => { });
>d : Symbol(d, Decl(promiseType.ts, 5, 5))
>p.then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))
>then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>b : Symbol(b, Decl(promiseType.ts, 5, 17))
>e : Symbol(e, Decl(promiseType.ts, 5, 24))

const e = p.then(b => 1, e => { throw Error(); });
>e : Symbol(e, Decl(promiseType.ts, 6, 5))
>p.then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))
>then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>b : Symbol(b, Decl(promiseType.ts, 6, 17))
>e : Symbol(e, Decl(promiseType.ts, 6, 24))
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const f = p.then(b => 1, e => Promise.reject(Error()));
>f : Symbol(f, Decl(promiseType.ts, 7, 5))
>p.then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))
>then : Symbol(Promise.then, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>b : Symbol(b, Decl(promiseType.ts, 7, 17))
>e : Symbol(e, Decl(promiseType.ts, 7, 24))
>Promise.reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const g = p.catch(e => 'error');
>g : Symbol(g, Decl(promiseType.ts, 8, 5))
>p.catch : Symbol(Promise.catch, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))
>catch : Symbol(Promise.catch, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>e : Symbol(e, Decl(promiseType.ts, 8, 18))

const h = p.catch(e => { });
>h : Symbol(h, Decl(promiseType.ts, 9, 5))
>p.catch : Symbol(Promise.catch, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))
>catch : Symbol(Promise.catch, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>e : Symbol(e, Decl(promiseType.ts, 9, 18))

const i = p.catch(e => { throw Error(); });
>i : Symbol(i, Decl(promiseType.ts, 10, 5))
>p.catch : Symbol(Promise.catch, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))
>catch : Symbol(Promise.catch, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>e : Symbol(e, Decl(promiseType.ts, 10, 18))
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

const j = p.catch(e => Promise.reject(Error()));
>j : Symbol(j, Decl(promiseType.ts, 11, 5))
>p.catch : Symbol(Promise.catch, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))
>catch : Symbol(Promise.catch, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>e : Symbol(e, Decl(promiseType.ts, 11, 18))
>Promise.reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

async function A() {
>A : Symbol(A, Decl(promiseType.ts, 11, 48))

    const a = await p;
>a : Symbol(a, Decl(promiseType.ts, 14, 9))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))

    return a;
>a : Symbol(a, Decl(promiseType.ts, 14, 9))
}

async function B() {
>B : Symbol(B, Decl(promiseType.ts, 16, 1))

    const a = await p;
>a : Symbol(a, Decl(promiseType.ts, 19, 9))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))

    return 1;
}

// NOTE: This reports a "No best comment type exists among return expressions." error, and is
//       ignored to get the types result for the test.
// async function C() {
//     try {
//         const a = await p;
//         return 1;
//     }
//     catch (e) {
//         return 'error';
//     }
// }

async function D() {
>D : Symbol(D, Decl(promiseType.ts, 21, 1))

    try {
        const a = await p;
>a : Symbol(a, Decl(promiseType.ts, 37, 13))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))

        return 1;
    }
    catch (e) {
>e : Symbol(e, Decl(promiseType.ts, 40, 11))
    }
}

async function E() {
>E : Symbol(E, Decl(promiseType.ts, 42, 1))

    try {
        const a = await p;
>a : Symbol(a, Decl(promiseType.ts, 46, 13))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))

        return 1;
    }
    catch (e) {
>e : Symbol(e, Decl(promiseType.ts, 49, 11))

        throw Error();
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
    }
}

async function F() {
>F : Symbol(F, Decl(promiseType.ts, 52, 1))

    try {
        const a = await p;
>a : Symbol(a, Decl(promiseType.ts, 56, 13))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))

        return 1;
    }
    catch (e) {
>e : Symbol(e, Decl(promiseType.ts, 59, 11))

        return Promise.reject(Error());
>Promise.reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
    }
}

async function G() {
>G : Symbol(G, Decl(promiseType.ts, 62, 1))

    try {
        const a = await p;
>a : Symbol(a, Decl(promiseType.ts, 66, 13))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))

        return a;
>a : Symbol(a, Decl(promiseType.ts, 66, 13))
    }
    catch (e) {
>e : Symbol(e, Decl(promiseType.ts, 69, 11))

        return;
    }
}

async function H() {
>H : Symbol(H, Decl(promiseType.ts, 72, 1))

    try {
        const a = await p;
>a : Symbol(a, Decl(promiseType.ts, 76, 13))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))

        return a;
>a : Symbol(a, Decl(promiseType.ts, 76, 13))
    }
    catch (e) {
>e : Symbol(e, Decl(promiseType.ts, 79, 11))

        throw Error();
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
    }
}

async function I() {
>I : Symbol(I, Decl(promiseType.ts, 82, 1))

    try {
        const a = await p;
>a : Symbol(a, Decl(promiseType.ts, 86, 13))
>p : Symbol(p, Decl(promiseType.ts, 0, 11))

        return a;
>a : Symbol(a, Decl(promiseType.ts, 86, 13))
    }
    catch (e) {
>e : Symbol(e, Decl(promiseType.ts, 89, 11))

        return Promise.reject(Error());
>Promise.reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>Promise : Symbol(Promise, Decl(lib.es2015.symbol.wellknown.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.iterable.d.ts, --, --))
>reject : Symbol(PromiseConstructor.reject, Decl(lib.es2015.promise.d.ts, --, --), Decl(lib.es2015.promise.d.ts, --, --))
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
    }
}
