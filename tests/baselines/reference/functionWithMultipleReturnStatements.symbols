=== tests/cases/conformance/types/typeRelationships/bestCommonType/functionWithMultipleReturnStatements.ts ===

// return type of a function with multiple returns is the BCT of each return statement
// it is an error if there is no single BCT, these are error cases

function f1() {
>f1 : Symbol(f1, Decl(functionWithMultipleReturnStatements.ts, 0, 0))

    if (true) {
        return 1;
    } else {
        return '';
    }
}

function f2() {
>f2 : Symbol(f2, Decl(functionWithMultipleReturnStatements.ts, 10, 1))

    if (true) {
        return 1;
    } else if (false) {
        return 2;
    } else {
        return '';
    }
}

function f3() {
>f3 : Symbol(f3, Decl(functionWithMultipleReturnStatements.ts, 20, 1))

    try {
        return 1;
    }
    catch (e) {
>e : Symbol(e, Decl(functionWithMultipleReturnStatements.ts, 26, 11))

        return '';
    }
}

function f4() {
>f4 : Symbol(f4, Decl(functionWithMultipleReturnStatements.ts, 29, 1))

    try {
        return 1;
    }
    catch (e) {
>e : Symbol(e, Decl(functionWithMultipleReturnStatements.ts, 35, 11))

    }
    finally {
        return '';
    }
}

function f5() {
>f5 : Symbol(f5, Decl(functionWithMultipleReturnStatements.ts, 41, 1))

    return 1;
    return '';
}

function f6<T, U>(x: T, y:U) {
>f6 : Symbol(f6, Decl(functionWithMultipleReturnStatements.ts, 46, 1))
>T : Symbol(T, Decl(functionWithMultipleReturnStatements.ts, 48, 12))
>U : Symbol(U, Decl(functionWithMultipleReturnStatements.ts, 48, 14))
>x : Symbol(x, Decl(functionWithMultipleReturnStatements.ts, 48, 18))
>T : Symbol(T, Decl(functionWithMultipleReturnStatements.ts, 48, 12))
>y : Symbol(y, Decl(functionWithMultipleReturnStatements.ts, 48, 23))
>U : Symbol(U, Decl(functionWithMultipleReturnStatements.ts, 48, 14))

    if (true) {
        return x;
>x : Symbol(x, Decl(functionWithMultipleReturnStatements.ts, 48, 18))

    } else {
        return y;
>y : Symbol(y, Decl(functionWithMultipleReturnStatements.ts, 48, 23))
    }
}

function f8<T extends U, U extends V, V>(x: T, y: U) {
>f8 : Symbol(f8, Decl(functionWithMultipleReturnStatements.ts, 54, 1))
>T : Symbol(T, Decl(functionWithMultipleReturnStatements.ts, 56, 12))
>U : Symbol(U, Decl(functionWithMultipleReturnStatements.ts, 56, 24))
>U : Symbol(U, Decl(functionWithMultipleReturnStatements.ts, 56, 24))
>V : Symbol(V, Decl(functionWithMultipleReturnStatements.ts, 56, 37))
>V : Symbol(V, Decl(functionWithMultipleReturnStatements.ts, 56, 37))
>x : Symbol(x, Decl(functionWithMultipleReturnStatements.ts, 56, 41))
>T : Symbol(T, Decl(functionWithMultipleReturnStatements.ts, 56, 12))
>y : Symbol(y, Decl(functionWithMultipleReturnStatements.ts, 56, 46))
>U : Symbol(U, Decl(functionWithMultipleReturnStatements.ts, 56, 24))

    if (true) {
        return x;
>x : Symbol(x, Decl(functionWithMultipleReturnStatements.ts, 56, 41))

    } else {
        return y;
>y : Symbol(y, Decl(functionWithMultipleReturnStatements.ts, 56, 46))
    }
}

