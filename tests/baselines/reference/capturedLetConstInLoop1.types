=== tests/cases/compiler/capturedLetConstInLoop1.ts ===
//==== let
for (let x in {}) {
>x : string
>{} : {}

    (function() { return x});
>(function() { return x}) : () => string
>function() { return x} : () => string
>x : string

    (() => x);
>(() => x) : () => string
>() => x : () => string
>x : string
}

for (let x of []) {
>x : any
>[] : undefined[]

    (function() { return x});
>(function() { return x}) : () => any
>function() { return x} : () => any
>x : any

    (() => x);
>(() => x) : () => any
>() => x : () => any
>x : any
}

for (let x = 0; x < 1; ++x) {
>x : number
>0 : number
>x < 1 : boolean
>x : number
>1 : number
>++x : number
>x : number

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : number

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : number
}

while (1 === 1) {
>1 === 1 : boolean
>1 : 1
>1 : 1

    let x;
>x : any

    (function() { return x});
>(function() { return x}) : () => any
>function() { return x} : () => any
>x : any

    (() => x);
>(() => x) : () => any
>() => x : () => any
>x : any
}

do {
    let x;
>x : any

    (function() { return x});
>(function() { return x}) : () => any
>function() { return x} : () => any
>x : any

    (() => x);
>(() => x) : () => any
>() => x : () => any
>x : any

} while (1 === 1)
>1 === 1 : boolean
>1 : 1
>1 : 1

for (let y = 0; y < 1; ++y) {
>y : number
>0 : number
>y < 1 : boolean
>y : number
>1 : number
>++y : number
>y : number

    let x = 1;
>x : number
>1 : number

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : number

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : number
}

for (let x = 0, y = 1; x < 1; ++x) {
>x : number
>0 : number
>y : number
>1 : number
>x < 1 : boolean
>x : number
>1 : number
>++x : number
>x : number

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>x : number
>y : number

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>x : number
>y : number
}

while (1 === 1) {
>1 === 1 : boolean
>1 : 1
>1 : 1

    let x, y;
>x : any
>y : any

    (function() { return x + y});
>(function() { return x + y}) : () => any
>function() { return x + y} : () => any
>x + y : any
>x : any
>y : any

    (() => x + y);
>(() => x + y) : () => any
>() => x + y : () => any
>x + y : any
>x : any
>y : any
}

do {
    let x, y;
>x : any
>y : any

    (function() { return x + y});
>(function() { return x + y}) : () => any
>function() { return x + y} : () => any
>x + y : any
>x : any
>y : any

    (() => x + y);
>(() => x + y) : () => any
>() => x + y : () => any
>x + y : any
>x : any
>y : any

} while (1 === 1)
>1 === 1 : boolean
>1 : 1
>1 : 1

for (let y = 0; y < 1; ++y) {
>y : number
>0 : number
>y < 1 : boolean
>y : number
>1 : number
>++y : number
>y : number

    let x = 1;
>x : number
>1 : number

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>x : number
>y : number

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>x : number
>y : number
}

//=========const
for (const x in {}) {
>x : string
>{} : {}

    (function() { return x});
>(function() { return x}) : () => string
>function() { return x} : () => string
>x : string

    (() => x);
>(() => x) : () => string
>() => x : () => string
>x : string
}

for (const x of []) {
>x : any
>[] : undefined[]

    (function() { return x});
>(function() { return x}) : () => any
>function() { return x} : () => any
>x : any

    (() => x);
>(() => x) : () => any
>() => x : () => any
>x : any
}

for (const x = 0; x < 1;) {
>x : number
>0 : number
>x < 1 : boolean
>x : number
>1 : number

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : number

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : number
}

while (1 === 1) {
>1 === 1 : boolean
>1 : 1
>1 : 1

    const x = 1;
>x : number
>1 : number

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : number

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : number
}

do {
    const x = 1;
>x : number
>1 : number

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : number

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : number

} while (1 === 1)
>1 === 1 : boolean
>1 : 1
>1 : 1

for (const y = 0; y < 1;) {
>y : number
>0 : number
>y < 1 : boolean
>y : number
>1 : number

    const x = 1;
>x : number
>1 : number

    (function() { return x});
>(function() { return x}) : () => number
>function() { return x} : () => number
>x : number

    (() => x);
>(() => x) : () => number
>() => x : () => number
>x : number
}

for (const x = 0, y = 1; x < 1;) {
>x : number
>0 : number
>y : number
>1 : number
>x < 1 : boolean
>x : number
>1 : number

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>x : number
>y : number

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>x : number
>y : number
}

while (1 === 1) {
>1 === 1 : boolean
>1 : 1
>1 : 1

    const x = 1, y = 1;
>x : number
>1 : number
>y : number
>1 : number

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>x : number
>y : number

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>x : number
>y : number
}

do {
    const x = 1, y = 1;
>x : number
>1 : number
>y : number
>1 : number

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>x : number
>y : number

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>x : number
>y : number

} while (1 === 1)
>1 === 1 : boolean
>1 : 1
>1 : 1

for (const y = 0; y < 1;) {
>y : number
>0 : number
>y < 1 : boolean
>y : number
>1 : number

    const x = 1;
>x : number
>1 : number

    (function() { return x + y});
>(function() { return x + y}) : () => number
>function() { return x + y} : () => number
>x + y : number
>x : number
>y : number

    (() => x + y);
>(() => x + y) : () => number
>() => x + y : () => number
>x + y : number
>x : number
>y : number
}
