=== tests/cases/conformance/statements/throwStatements/throwInEnclosingStatements.ts ===

function fn(x) {
>fn : Symbol(fn, Decl(throwInEnclosingStatements.ts, 0, 0))
>x : Symbol(x, Decl(throwInEnclosingStatements.ts, 1, 12))

    throw x;
>x : Symbol(x, Decl(throwInEnclosingStatements.ts, 1, 12))
}

<T>(x: T) => { throw x; }
>T : Symbol(T, Decl(throwInEnclosingStatements.ts, 5, 1))
>x : Symbol(x, Decl(throwInEnclosingStatements.ts, 5, 4))
>T : Symbol(T, Decl(throwInEnclosingStatements.ts, 5, 1))
>x : Symbol(x, Decl(throwInEnclosingStatements.ts, 5, 4))

var y: string;
>y : Symbol(y, Decl(throwInEnclosingStatements.ts, 7, 3))

switch (y) {
>y : Symbol(y, Decl(throwInEnclosingStatements.ts, 7, 3))

    case 'a':
        throw y;
>y : Symbol(y, Decl(throwInEnclosingStatements.ts, 7, 3))

    default:
        throw y;
>y : Symbol(y, Decl(throwInEnclosingStatements.ts, 7, 3))
}

var z = 0;
>z : Symbol(z, Decl(throwInEnclosingStatements.ts, 15, 3))

while (z < 10) {
>z : Symbol(z, Decl(throwInEnclosingStatements.ts, 15, 3))

    throw z;
>z : Symbol(z, Decl(throwInEnclosingStatements.ts, 15, 3))
}

for (var i = 0; ;) { throw i; }
>i : Symbol(i, Decl(throwInEnclosingStatements.ts, 20, 8))
>i : Symbol(i, Decl(throwInEnclosingStatements.ts, 20, 8))

for (var idx in {}) { throw idx; }
>idx : Symbol(idx, Decl(throwInEnclosingStatements.ts, 22, 8))
>idx : Symbol(idx, Decl(throwInEnclosingStatements.ts, 22, 8))

do { throw null; }while(true)

var j = 0;
>j : Symbol(j, Decl(throwInEnclosingStatements.ts, 26, 3))

while (j < 0) { throw j; }
>j : Symbol(j, Decl(throwInEnclosingStatements.ts, 26, 3))
>j : Symbol(j, Decl(throwInEnclosingStatements.ts, 26, 3))

class C<T> {
>C : Symbol(C, Decl(throwInEnclosingStatements.ts, 27, 26))
>T : Symbol(T, Decl(throwInEnclosingStatements.ts, 29, 8))

    private value: T;
>value : Symbol(C.value, Decl(throwInEnclosingStatements.ts, 29, 12))
>T : Symbol(T, Decl(throwInEnclosingStatements.ts, 29, 8))

    biz() {
>biz : Symbol(C.biz, Decl(throwInEnclosingStatements.ts, 30, 21))

        throw this.value;
>this.value : Symbol(C.value, Decl(throwInEnclosingStatements.ts, 29, 12))
>this : Symbol(C, Decl(throwInEnclosingStatements.ts, 27, 26))
>value : Symbol(C.value, Decl(throwInEnclosingStatements.ts, 29, 12))
    }

    constructor() {
        throw this;
>this : Symbol(C, Decl(throwInEnclosingStatements.ts, 27, 26))
    }
}

var aa = {
>aa : Symbol(aa, Decl(throwInEnclosingStatements.ts, 40, 3))

    id:12,
>id : Symbol(id, Decl(throwInEnclosingStatements.ts, 40, 10))

    biz() {
>biz : Symbol(biz, Decl(throwInEnclosingStatements.ts, 41, 10))

        throw this;
    }
}

