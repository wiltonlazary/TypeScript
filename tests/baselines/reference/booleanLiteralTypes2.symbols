=== tests/cases/conformance/types/literal/booleanLiteralTypes2.ts ===

type A1 = true | false;
>A1 : Symbol(A1, Decl(booleanLiteralTypes2.ts, 0, 0))

type A2 = false | true;
>A2 : Symbol(A2, Decl(booleanLiteralTypes2.ts, 1, 23))

function f1() {
>f1 : Symbol(f1, Decl(booleanLiteralTypes2.ts, 2, 23))

    var a: A1;
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 5, 7), Decl(booleanLiteralTypes2.ts, 6, 7), Decl(booleanLiteralTypes2.ts, 7, 7), Decl(booleanLiteralTypes2.ts, 8, 7))
>A1 : Symbol(A1, Decl(booleanLiteralTypes2.ts, 0, 0))

    var a: A2;
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 5, 7), Decl(booleanLiteralTypes2.ts, 6, 7), Decl(booleanLiteralTypes2.ts, 7, 7), Decl(booleanLiteralTypes2.ts, 8, 7))
>A2 : Symbol(A2, Decl(booleanLiteralTypes2.ts, 1, 23))

    var a: true | false;
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 5, 7), Decl(booleanLiteralTypes2.ts, 6, 7), Decl(booleanLiteralTypes2.ts, 7, 7), Decl(booleanLiteralTypes2.ts, 8, 7))

    var a: false | true;
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 5, 7), Decl(booleanLiteralTypes2.ts, 6, 7), Decl(booleanLiteralTypes2.ts, 7, 7), Decl(booleanLiteralTypes2.ts, 8, 7))
}

function f2(a: true | false, b: boolean) {
>f2 : Symbol(f2, Decl(booleanLiteralTypes2.ts, 9, 1))
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 11, 12))
>b : Symbol(b, Decl(booleanLiteralTypes2.ts, 11, 28))

    a = b;
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 11, 12))
>b : Symbol(b, Decl(booleanLiteralTypes2.ts, 11, 28))

    b = a;
>b : Symbol(b, Decl(booleanLiteralTypes2.ts, 11, 28))
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 11, 12))
}

function f3(a: true | false, b: true | false) {
>f3 : Symbol(f3, Decl(booleanLiteralTypes2.ts, 14, 1))
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 16, 12))
>b : Symbol(b, Decl(booleanLiteralTypes2.ts, 16, 28))

    var x = a || b;
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 17, 7), Decl(booleanLiteralTypes2.ts, 18, 7), Decl(booleanLiteralTypes2.ts, 19, 7))
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 16, 12))
>b : Symbol(b, Decl(booleanLiteralTypes2.ts, 16, 28))

    var x = a && b;
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 17, 7), Decl(booleanLiteralTypes2.ts, 18, 7), Decl(booleanLiteralTypes2.ts, 19, 7))
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 16, 12))
>b : Symbol(b, Decl(booleanLiteralTypes2.ts, 16, 28))

    var x = !a;
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 17, 7), Decl(booleanLiteralTypes2.ts, 18, 7), Decl(booleanLiteralTypes2.ts, 19, 7))
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 16, 12))
}

function f4(t: true, f: false) {
>f4 : Symbol(f4, Decl(booleanLiteralTypes2.ts, 20, 1))
>t : Symbol(t, Decl(booleanLiteralTypes2.ts, 22, 12))
>f : Symbol(f, Decl(booleanLiteralTypes2.ts, 22, 20))

    var x1 = t && f;
>x1 : Symbol(x1, Decl(booleanLiteralTypes2.ts, 23, 7))
>t : Symbol(t, Decl(booleanLiteralTypes2.ts, 22, 12))
>f : Symbol(f, Decl(booleanLiteralTypes2.ts, 22, 20))

    var x2 = f && t;
>x2 : Symbol(x2, Decl(booleanLiteralTypes2.ts, 24, 7))
>f : Symbol(f, Decl(booleanLiteralTypes2.ts, 22, 20))
>t : Symbol(t, Decl(booleanLiteralTypes2.ts, 22, 12))

    var x3 = t || f;
>x3 : Symbol(x3, Decl(booleanLiteralTypes2.ts, 25, 7))
>t : Symbol(t, Decl(booleanLiteralTypes2.ts, 22, 12))
>f : Symbol(f, Decl(booleanLiteralTypes2.ts, 22, 20))

    var x4 = f || t;
>x4 : Symbol(x4, Decl(booleanLiteralTypes2.ts, 26, 7))
>f : Symbol(f, Decl(booleanLiteralTypes2.ts, 22, 20))
>t : Symbol(t, Decl(booleanLiteralTypes2.ts, 22, 12))

    var x5 = !t;
>x5 : Symbol(x5, Decl(booleanLiteralTypes2.ts, 27, 7))
>t : Symbol(t, Decl(booleanLiteralTypes2.ts, 22, 12))

    var x6 = !f;
>x6 : Symbol(x6, Decl(booleanLiteralTypes2.ts, 28, 7))
>f : Symbol(f, Decl(booleanLiteralTypes2.ts, 22, 20))
}

declare function g(x: true): string;
>g : Symbol(g, Decl(booleanLiteralTypes2.ts, 29, 1), Decl(booleanLiteralTypes2.ts, 31, 36), Decl(booleanLiteralTypes2.ts, 32, 38))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 31, 19))

declare function g(x: false): boolean;
>g : Symbol(g, Decl(booleanLiteralTypes2.ts, 29, 1), Decl(booleanLiteralTypes2.ts, 31, 36), Decl(booleanLiteralTypes2.ts, 32, 38))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 32, 19))

declare function g(x: boolean): number;
>g : Symbol(g, Decl(booleanLiteralTypes2.ts, 29, 1), Decl(booleanLiteralTypes2.ts, 31, 36), Decl(booleanLiteralTypes2.ts, 32, 38))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 33, 19))

function f5(b: boolean) {
>f5 : Symbol(f5, Decl(booleanLiteralTypes2.ts, 33, 39))
>b : Symbol(b, Decl(booleanLiteralTypes2.ts, 35, 12))

    var z1 = g(true);
>z1 : Symbol(z1, Decl(booleanLiteralTypes2.ts, 36, 7))
>g : Symbol(g, Decl(booleanLiteralTypes2.ts, 29, 1), Decl(booleanLiteralTypes2.ts, 31, 36), Decl(booleanLiteralTypes2.ts, 32, 38))

    var z2 = g(false);
>z2 : Symbol(z2, Decl(booleanLiteralTypes2.ts, 37, 7))
>g : Symbol(g, Decl(booleanLiteralTypes2.ts, 29, 1), Decl(booleanLiteralTypes2.ts, 31, 36), Decl(booleanLiteralTypes2.ts, 32, 38))

    var z3 = g(b);
>z3 : Symbol(z3, Decl(booleanLiteralTypes2.ts, 38, 7))
>g : Symbol(g, Decl(booleanLiteralTypes2.ts, 29, 1), Decl(booleanLiteralTypes2.ts, 31, 36), Decl(booleanLiteralTypes2.ts, 32, 38))
>b : Symbol(b, Decl(booleanLiteralTypes2.ts, 35, 12))
}

function assertNever(x: never): never {
>assertNever : Symbol(assertNever, Decl(booleanLiteralTypes2.ts, 39, 1))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 41, 21))

    throw new Error("Unexpected value");
>Error : Symbol(Error, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
}

function f10(x: true | false) {
>f10 : Symbol(f10, Decl(booleanLiteralTypes2.ts, 43, 1))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 45, 13))

    switch (x) {
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 45, 13))

        case true: return "true";
        case false: return "false";
    }
}

function f11(x: true | false) {
>f11 : Symbol(f11, Decl(booleanLiteralTypes2.ts, 50, 1))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 52, 13))

    switch (x) {
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 52, 13))

        case true: return "true";
        case false: return "false";
    }
    return assertNever(x);
>assertNever : Symbol(assertNever, Decl(booleanLiteralTypes2.ts, 39, 1))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 52, 13))
}

function f12(x: true | false) {
>f12 : Symbol(f12, Decl(booleanLiteralTypes2.ts, 58, 1))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 60, 13))

    if (x) {
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 60, 13))

        x;
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 60, 13))
    }
    else {
        x;
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 60, 13))
    }
}

function f13(x: true | false) {
>f13 : Symbol(f13, Decl(booleanLiteralTypes2.ts, 67, 1))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 69, 13))

    if (x === true) {
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 69, 13))

        x;
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 69, 13))
    }
    else {
        x;
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 69, 13))
    }
}

type Item =
>Item : Symbol(Item, Decl(booleanLiteralTypes2.ts, 76, 1))

    { kind: true, a: string } |
>kind : Symbol(kind, Decl(booleanLiteralTypes2.ts, 79, 5))
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 79, 17))

    { kind: false, b: string };
>kind : Symbol(kind, Decl(booleanLiteralTypes2.ts, 80, 5))
>b : Symbol(b, Decl(booleanLiteralTypes2.ts, 80, 18))

function f20(x: Item) {
>f20 : Symbol(f20, Decl(booleanLiteralTypes2.ts, 80, 31))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 82, 13))
>Item : Symbol(Item, Decl(booleanLiteralTypes2.ts, 76, 1))

    switch (x.kind) {
>x.kind : Symbol(kind, Decl(booleanLiteralTypes2.ts, 79, 5), Decl(booleanLiteralTypes2.ts, 80, 5))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 82, 13))
>kind : Symbol(kind, Decl(booleanLiteralTypes2.ts, 79, 5), Decl(booleanLiteralTypes2.ts, 80, 5))

        case true: return x.a;
>x.a : Symbol(a, Decl(booleanLiteralTypes2.ts, 79, 17))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 82, 13))
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 79, 17))

        case false: return x.b;
>x.b : Symbol(b, Decl(booleanLiteralTypes2.ts, 80, 18))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 82, 13))
>b : Symbol(b, Decl(booleanLiteralTypes2.ts, 80, 18))
    }
}

function f21(x: Item) {
>f21 : Symbol(f21, Decl(booleanLiteralTypes2.ts, 87, 1))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 89, 13))
>Item : Symbol(Item, Decl(booleanLiteralTypes2.ts, 76, 1))

    switch (x.kind) {
>x.kind : Symbol(kind, Decl(booleanLiteralTypes2.ts, 79, 5), Decl(booleanLiteralTypes2.ts, 80, 5))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 89, 13))
>kind : Symbol(kind, Decl(booleanLiteralTypes2.ts, 79, 5), Decl(booleanLiteralTypes2.ts, 80, 5))

        case true: return x.a;
>x.a : Symbol(a, Decl(booleanLiteralTypes2.ts, 79, 17))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 89, 13))
>a : Symbol(a, Decl(booleanLiteralTypes2.ts, 79, 17))

        case false: return x.b;
>x.b : Symbol(b, Decl(booleanLiteralTypes2.ts, 80, 18))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 89, 13))
>b : Symbol(b, Decl(booleanLiteralTypes2.ts, 80, 18))
    }
    return assertNever(x);
>assertNever : Symbol(assertNever, Decl(booleanLiteralTypes2.ts, 39, 1))
>x : Symbol(x, Decl(booleanLiteralTypes2.ts, 89, 13))
}
