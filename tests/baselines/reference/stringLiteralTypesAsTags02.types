=== tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTags02.ts ===

type Kind = "A" | "B"
>Kind : "A" | "B"

interface Entity {
>Entity : Entity

    kind: Kind;
>kind : "A" | "B"
>Kind : "A" | "B"
}

interface A extends Entity {
>A : A
>Entity : Entity

    kind: "A";
>kind : "A"

    a: number;
>a : number
}

interface B extends Entity {
>B : B
>Entity : Entity

    kind: "B";
>kind : "B"

    b: string;
>b : string
}

function hasKind(entity: Entity, kind: "A"): entity is A;
>hasKind : { (entity: Entity, kind: "A"): entity is A; (entity: Entity, kind: "B"): entity is B; }
>entity : Entity
>Entity : Entity
>kind : "A"
>entity : any
>A : A

function hasKind(entity: Entity, kind: "B"): entity is B;
>hasKind : { (entity: Entity, kind: "A"): entity is A; (entity: Entity, kind: "B"): entity is B; }
>entity : Entity
>Entity : Entity
>kind : "B"
>entity : any
>B : B

function hasKind(entity: Entity, kind: Kind): entity is (A | B) {
>hasKind : { (entity: Entity, kind: "A"): entity is A; (entity: Entity, kind: "B"): entity is B; }
>entity : Entity
>Entity : Entity
>kind : "A" | "B"
>Kind : "A" | "B"
>entity : any
>A : A
>B : B

    return entity.kind === kind;
>entity.kind === kind : boolean
>entity.kind : "A" | "B"
>entity : Entity
>kind : "A" | "B"
>kind : "A" | "B"
}

let x: A = {
>x : A
>A : A
>{    kind: "A",    a: 100,} : { kind: "A"; a: number; }

    kind: "A",
>kind : "A"
>"A" : "A"

    a: 100,
>a : number
>100 : number
}

if (hasKind(x, "A")) {
>hasKind(x, "A") : boolean
>hasKind : { (entity: Entity, kind: "A"): entity is A; (entity: Entity, kind: "B"): entity is B; }
>x : A
>"A" : "A"

    let a = x;
>a : A
>x : A
}
else {
    let b = x;
>b : A
>x : A
}

if (!hasKind(x, "B")) {
>!hasKind(x, "B") : boolean
>hasKind(x, "B") : boolean
>hasKind : { (entity: Entity, kind: "A"): entity is A; (entity: Entity, kind: "B"): entity is B; }
>x : A
>"B" : "B"

    let c = x;
>c : A
>x : A
}
else {
    let d = x;
>d : nothing
>x : nothing
}
