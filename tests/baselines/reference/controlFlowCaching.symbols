=== tests/cases/compiler/controlFlowCaching.ts ===

// Repro for #8401

function f(dim, offsets, arr, acommon, centerAnchorLimit, g, has, lin) {
>f : Symbol(f, Decl(controlFlowCaching.ts, 0, 0))
>dim : Symbol(dim, Decl(controlFlowCaching.ts, 3, 11))
>offsets : Symbol(offsets, Decl(controlFlowCaching.ts, 3, 15))
>arr : Symbol(arr, Decl(controlFlowCaching.ts, 3, 24))
>acommon : Symbol(acommon, Decl(controlFlowCaching.ts, 3, 29))
>centerAnchorLimit : Symbol(centerAnchorLimit, Decl(controlFlowCaching.ts, 3, 38))
>g : Symbol(g, Decl(controlFlowCaching.ts, 3, 57))
>has : Symbol(has, Decl(controlFlowCaching.ts, 3, 60))
>lin : Symbol(lin, Decl(controlFlowCaching.ts, 3, 65))

    var isRtl = this._isRtl();  // chart mirroring
>isRtl : Symbol(isRtl, Decl(controlFlowCaching.ts, 4, 7))

    // prepare variable
    var o = this.opt, ta = this.chart.theme.axis, position = o.position,
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))
>position : Symbol(position, Decl(controlFlowCaching.ts, 6, 49))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))

        leftBottom = position !== "rightOrTop", rotation = o.rotation % 360,
>leftBottom : Symbol(leftBottom, Decl(controlFlowCaching.ts, 6, 72))
>position : Symbol(position, Decl(controlFlowCaching.ts, 6, 49))
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))

        start, stop, titlePos, titleRotation = 0, titleOffset, axisVector, tickVector, anchorOffset, labelOffset, labelAlign,
>start : Symbol(start, Decl(controlFlowCaching.ts, 7, 76))
>stop : Symbol(stop, Decl(controlFlowCaching.ts, 8, 14))
>titlePos : Symbol(titlePos, Decl(controlFlowCaching.ts, 8, 20))
>titleRotation : Symbol(titleRotation, Decl(controlFlowCaching.ts, 8, 30))
>titleOffset : Symbol(titleOffset, Decl(controlFlowCaching.ts, 8, 49))
>axisVector : Symbol(axisVector, Decl(controlFlowCaching.ts, 8, 62))
>tickVector : Symbol(tickVector, Decl(controlFlowCaching.ts, 8, 74))
>anchorOffset : Symbol(anchorOffset, Decl(controlFlowCaching.ts, 8, 86))
>labelOffset : Symbol(labelOffset, Decl(controlFlowCaching.ts, 8, 100))
>labelAlign : Symbol(labelAlign, Decl(controlFlowCaching.ts, 8, 113))

        labelGap = this.chart.theme.axis.tick.labelGap,
>labelGap : Symbol(labelGap, Decl(controlFlowCaching.ts, 8, 125))

        taFont = o.font || (ta.majorTick && ta.majorTick.font) || (ta.tick && ta.tick.font),
>taFont : Symbol(taFont, Decl(controlFlowCaching.ts, 9, 55))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))

        taTitleFont = o.titleFont || (ta.title && ta.title.font),
>taTitleFont : Symbol(taTitleFont, Decl(controlFlowCaching.ts, 10, 92))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))

        taFontColor = o.fontColor || (ta.majorTick && ta.majorTick.fontColor) || (ta.tick && ta.tick.fontColor) || "black",
>taFontColor : Symbol(taFontColor, Decl(controlFlowCaching.ts, 11, 65))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))

        taTitleFontColor = o.titleFontColor || (ta.title && ta.title.fontColor) || "black",
>taTitleFontColor : Symbol(taTitleFontColor, Decl(controlFlowCaching.ts, 12, 123))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))

        taTitleGap = (o.titleGap == 0) ? 0 : o.titleGap || (ta.title && ta.title.gap) || 15,
>taTitleGap : Symbol(taTitleGap, Decl(controlFlowCaching.ts, 13, 91))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))

        taTitleOrientation = o.titleOrientation || (ta.title && ta.title.orientation) || "axis",
>taTitleOrientation : Symbol(taTitleOrientation, Decl(controlFlowCaching.ts, 14, 92))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))

        taMajorTick = this.chart.theme.getTick("major", o),
>taMajorTick : Symbol(taMajorTick, Decl(controlFlowCaching.ts, 15, 96))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))

        taMinorTick = this.chart.theme.getTick("minor", o),
>taMinorTick : Symbol(taMinorTick, Decl(controlFlowCaching.ts, 16, 59))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))

        taMicroTick = this.chart.theme.getTick("micro", o),
>taMicroTick : Symbol(taMicroTick, Decl(controlFlowCaching.ts, 17, 59))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))

        taStroke = "stroke" in o ? o.stroke : ta.stroke,
>taStroke : Symbol(taStroke, Decl(controlFlowCaching.ts, 18, 59))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))
>o : Symbol(o, Decl(controlFlowCaching.ts, 6, 7))
>ta : Symbol(ta, Decl(controlFlowCaching.ts, 6, 21))

        size = taFont ? g.normalizedLength(g.splitFontString(taFont).size) : 0,
>size : Symbol(size, Decl(controlFlowCaching.ts, 20, 56))
>taFont : Symbol(taFont, Decl(controlFlowCaching.ts, 9, 55))
>g : Symbol(g, Decl(controlFlowCaching.ts, 3, 57))
>g : Symbol(g, Decl(controlFlowCaching.ts, 3, 57))
>taFont : Symbol(taFont, Decl(controlFlowCaching.ts, 9, 55))

        cosr = Math.abs(Math.cos(rotation * Math.PI / 180)),
>cosr : Symbol(cosr, Decl(controlFlowCaching.ts, 21, 79))
>Math.abs : Symbol(Math.abs, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>abs : Symbol(Math.abs, Decl(lib.d.ts, --, --))
>Math.cos : Symbol(Math.cos, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>cos : Symbol(Math.cos, Decl(lib.d.ts, --, --))
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))
>Math.PI : Symbol(Math.PI, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>PI : Symbol(Math.PI, Decl(lib.d.ts, --, --))

        sinr = Math.abs(Math.sin(rotation * Math.PI / 180)),
>sinr : Symbol(sinr, Decl(controlFlowCaching.ts, 22, 60))
>Math.abs : Symbol(Math.abs, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>abs : Symbol(Math.abs, Decl(lib.d.ts, --, --))
>Math.sin : Symbol(Math.sin, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>sin : Symbol(Math.sin, Decl(lib.d.ts, --, --))
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))
>Math.PI : Symbol(Math.PI, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>PI : Symbol(Math.PI, Decl(lib.d.ts, --, --))

        tsize = taTitleFont ? g.normalizedLength(g.splitFontString(taTitleFont).size) : 0;
>tsize : Symbol(tsize, Decl(controlFlowCaching.ts, 23, 60))
>taTitleFont : Symbol(taTitleFont, Decl(controlFlowCaching.ts, 10, 92))
>g : Symbol(g, Decl(controlFlowCaching.ts, 3, 57))
>g : Symbol(g, Decl(controlFlowCaching.ts, 3, 57))
>taTitleFont : Symbol(taTitleFont, Decl(controlFlowCaching.ts, 10, 92))

    if (rotation < 0) {
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))

        rotation += 360;
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))
    }
    var cachedLabelW = this._getMaxLabelSize();
>cachedLabelW : Symbol(cachedLabelW, Decl(controlFlowCaching.ts, 28, 7))

    cachedLabelW = cachedLabelW && cachedLabelW.majLabelW;
>cachedLabelW : Symbol(cachedLabelW, Decl(controlFlowCaching.ts, 28, 7))
>cachedLabelW : Symbol(cachedLabelW, Decl(controlFlowCaching.ts, 28, 7))
>cachedLabelW : Symbol(cachedLabelW, Decl(controlFlowCaching.ts, 28, 7))

    titleOffset = size * cosr + (cachedLabelW || 0) * sinr + labelGap + Math.max(taMajorTick.length > 0 ? taMajorTick.length : 0,
>titleOffset : Symbol(titleOffset, Decl(controlFlowCaching.ts, 8, 49))
>size : Symbol(size, Decl(controlFlowCaching.ts, 20, 56))
>cosr : Symbol(cosr, Decl(controlFlowCaching.ts, 21, 79))
>cachedLabelW : Symbol(cachedLabelW, Decl(controlFlowCaching.ts, 28, 7))
>sinr : Symbol(sinr, Decl(controlFlowCaching.ts, 22, 60))
>labelGap : Symbol(labelGap, Decl(controlFlowCaching.ts, 8, 125))
>Math.max : Symbol(Math.max, Decl(lib.d.ts, --, --))
>Math : Symbol(Math, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>max : Symbol(Math.max, Decl(lib.d.ts, --, --))
>taMajorTick : Symbol(taMajorTick, Decl(controlFlowCaching.ts, 15, 96))
>taMajorTick : Symbol(taMajorTick, Decl(controlFlowCaching.ts, 15, 96))

        taMinorTick.length > 0 ? taMinorTick.length : 0) +
>taMinorTick : Symbol(taMinorTick, Decl(controlFlowCaching.ts, 16, 59))
>taMinorTick : Symbol(taMinorTick, Decl(controlFlowCaching.ts, 16, 59))

        tsize + taTitleGap;
>tsize : Symbol(tsize, Decl(controlFlowCaching.ts, 23, 60))
>taTitleGap : Symbol(taTitleGap, Decl(controlFlowCaching.ts, 13, 91))

    axisVector = { x: isRtl ? -1 : 1, y: 0 };     // chart mirroring
>axisVector : Symbol(axisVector, Decl(controlFlowCaching.ts, 8, 62))
>x : Symbol(x, Decl(controlFlowCaching.ts, 33, 18))
>isRtl : Symbol(isRtl, Decl(controlFlowCaching.ts, 4, 7))
>y : Symbol(y, Decl(controlFlowCaching.ts, 33, 37))

    switch (rotation) {
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))

        default:
            if (rotation < (90 - centerAnchorLimit)) {
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))
>centerAnchorLimit : Symbol(centerAnchorLimit, Decl(controlFlowCaching.ts, 3, 38))

                labelOffset.y = leftBottom ? size : 0;
>labelOffset : Symbol(labelOffset, Decl(controlFlowCaching.ts, 8, 100))
>leftBottom : Symbol(leftBottom, Decl(controlFlowCaching.ts, 6, 72))
>size : Symbol(size, Decl(controlFlowCaching.ts, 20, 56))

            } else if (rotation < (90 + centerAnchorLimit)) {
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))
>centerAnchorLimit : Symbol(centerAnchorLimit, Decl(controlFlowCaching.ts, 3, 38))

                labelOffset.x = -size * 0.4;
>labelOffset : Symbol(labelOffset, Decl(controlFlowCaching.ts, 8, 100))
>size : Symbol(size, Decl(controlFlowCaching.ts, 20, 56))

            } else if (rotation < 180) {
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))

                labelOffset.y = leftBottom ? 0 : -size;
>labelOffset : Symbol(labelOffset, Decl(controlFlowCaching.ts, 8, 100))
>leftBottom : Symbol(leftBottom, Decl(controlFlowCaching.ts, 6, 72))
>size : Symbol(size, Decl(controlFlowCaching.ts, 20, 56))

            } else if (rotation < (270 - centerAnchorLimit)) {
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))
>centerAnchorLimit : Symbol(centerAnchorLimit, Decl(controlFlowCaching.ts, 3, 38))

                labelOffset.y = leftBottom ? 0 : -size;
>labelOffset : Symbol(labelOffset, Decl(controlFlowCaching.ts, 8, 100))
>leftBottom : Symbol(leftBottom, Decl(controlFlowCaching.ts, 6, 72))
>size : Symbol(size, Decl(controlFlowCaching.ts, 20, 56))

            } else if (rotation < (270 + centerAnchorLimit)) {
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))
>centerAnchorLimit : Symbol(centerAnchorLimit, Decl(controlFlowCaching.ts, 3, 38))

                labelOffset.y = leftBottom ? size * 0.4 : 0;
>labelOffset : Symbol(labelOffset, Decl(controlFlowCaching.ts, 8, 100))
>leftBottom : Symbol(leftBottom, Decl(controlFlowCaching.ts, 6, 72))
>size : Symbol(size, Decl(controlFlowCaching.ts, 20, 56))

            } else {
                labelOffset.y = leftBottom ? size : 0;
>labelOffset : Symbol(labelOffset, Decl(controlFlowCaching.ts, 8, 100))
>leftBottom : Symbol(leftBottom, Decl(controlFlowCaching.ts, 6, 72))
>size : Symbol(size, Decl(controlFlowCaching.ts, 20, 56))
            }
    }

    titleRotation = (taTitleOrientation && taTitleOrientation == "away") ? 180 : 0;
>titleRotation : Symbol(titleRotation, Decl(controlFlowCaching.ts, 8, 30))
>taTitleOrientation : Symbol(taTitleOrientation, Decl(controlFlowCaching.ts, 14, 92))
>taTitleOrientation : Symbol(taTitleOrientation, Decl(controlFlowCaching.ts, 14, 92))

    titlePos.y = offsets.t - titleOffset + (titleRotation ? 0 : tsize);
>titlePos : Symbol(titlePos, Decl(controlFlowCaching.ts, 8, 20))
>offsets : Symbol(offsets, Decl(controlFlowCaching.ts, 3, 15))
>titleOffset : Symbol(titleOffset, Decl(controlFlowCaching.ts, 8, 49))
>titleRotation : Symbol(titleRotation, Decl(controlFlowCaching.ts, 8, 30))
>tsize : Symbol(tsize, Decl(controlFlowCaching.ts, 23, 60))

    switch (labelAlign) {
>labelAlign : Symbol(labelAlign, Decl(controlFlowCaching.ts, 8, 113))

        case "start":
            labelAlign = "end";
>labelAlign : Symbol(labelAlign, Decl(controlFlowCaching.ts, 8, 113))

            break;
        case "end":
            labelAlign = "start";
>labelAlign : Symbol(labelAlign, Decl(controlFlowCaching.ts, 8, 113))

            break;
        case "middle":
            labelOffset.y -= size;
>labelOffset : Symbol(labelOffset, Decl(controlFlowCaching.ts, 8, 100))
>size : Symbol(size, Decl(controlFlowCaching.ts, 20, 56))

            break;
    }

    let _ = rotation;
>_ : Symbol(_, Decl(controlFlowCaching.ts, 65, 7))
>rotation : Symbol(rotation, Decl(controlFlowCaching.ts, 7, 47))
}

