=== tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithBooleanType.ts ===

// ~ operator on boolean type
var BOOLEAN: boolean;
>BOOLEAN : Symbol(BOOLEAN, Decl(bitwiseNotOperatorWithBooleanType.ts, 2, 3))

function foo(): boolean { return true; }
>foo : Symbol(foo, Decl(bitwiseNotOperatorWithBooleanType.ts, 2, 21))

class A {
>A : Symbol(A, Decl(bitwiseNotOperatorWithBooleanType.ts, 4, 40))

    public a: boolean;
>a : Symbol(A.a, Decl(bitwiseNotOperatorWithBooleanType.ts, 6, 9))

    static foo() { return false; }
>foo : Symbol(A.foo, Decl(bitwiseNotOperatorWithBooleanType.ts, 7, 22))
}
module M {
>M : Symbol(M, Decl(bitwiseNotOperatorWithBooleanType.ts, 9, 1))

    export var n: boolean;
>n : Symbol(n, Decl(bitwiseNotOperatorWithBooleanType.ts, 11, 14))
}

var objA = new A();
>objA : Symbol(objA, Decl(bitwiseNotOperatorWithBooleanType.ts, 14, 3))
>A : Symbol(A, Decl(bitwiseNotOperatorWithBooleanType.ts, 4, 40))

// boolean type var
var ResultIsNumber1 = ~BOOLEAN;
>ResultIsNumber1 : Symbol(ResultIsNumber1, Decl(bitwiseNotOperatorWithBooleanType.ts, 17, 3))
>BOOLEAN : Symbol(BOOLEAN, Decl(bitwiseNotOperatorWithBooleanType.ts, 2, 3))

// boolean type literal
var ResultIsNumber2 = ~true;
>ResultIsNumber2 : Symbol(ResultIsNumber2, Decl(bitwiseNotOperatorWithBooleanType.ts, 20, 3))

var ResultIsNumber3 = ~{ x: true, y: false };
>ResultIsNumber3 : Symbol(ResultIsNumber3, Decl(bitwiseNotOperatorWithBooleanType.ts, 21, 3))
>x : Symbol(x, Decl(bitwiseNotOperatorWithBooleanType.ts, 21, 24))
>y : Symbol(y, Decl(bitwiseNotOperatorWithBooleanType.ts, 21, 33))

// boolean type expressions
var ResultIsNumber4 = ~objA.a;
>ResultIsNumber4 : Symbol(ResultIsNumber4, Decl(bitwiseNotOperatorWithBooleanType.ts, 24, 3))
>objA.a : Symbol(A.a, Decl(bitwiseNotOperatorWithBooleanType.ts, 6, 9))
>objA : Symbol(objA, Decl(bitwiseNotOperatorWithBooleanType.ts, 14, 3))
>a : Symbol(A.a, Decl(bitwiseNotOperatorWithBooleanType.ts, 6, 9))

var ResultIsNumber5 = ~M.n;
>ResultIsNumber5 : Symbol(ResultIsNumber5, Decl(bitwiseNotOperatorWithBooleanType.ts, 25, 3))
>M.n : Symbol(M.n, Decl(bitwiseNotOperatorWithBooleanType.ts, 11, 14))
>M : Symbol(M, Decl(bitwiseNotOperatorWithBooleanType.ts, 9, 1))
>n : Symbol(M.n, Decl(bitwiseNotOperatorWithBooleanType.ts, 11, 14))

var ResultIsNumber6 = ~foo();
>ResultIsNumber6 : Symbol(ResultIsNumber6, Decl(bitwiseNotOperatorWithBooleanType.ts, 26, 3))
>foo : Symbol(foo, Decl(bitwiseNotOperatorWithBooleanType.ts, 2, 21))

var ResultIsNumber7 = ~A.foo();
>ResultIsNumber7 : Symbol(ResultIsNumber7, Decl(bitwiseNotOperatorWithBooleanType.ts, 27, 3))
>A.foo : Symbol(A.foo, Decl(bitwiseNotOperatorWithBooleanType.ts, 7, 22))
>A : Symbol(A, Decl(bitwiseNotOperatorWithBooleanType.ts, 4, 40))
>foo : Symbol(A.foo, Decl(bitwiseNotOperatorWithBooleanType.ts, 7, 22))

// multiple ~ operators
var ResultIsNumber8 = ~~BOOLEAN;
>ResultIsNumber8 : Symbol(ResultIsNumber8, Decl(bitwiseNotOperatorWithBooleanType.ts, 30, 3))
>BOOLEAN : Symbol(BOOLEAN, Decl(bitwiseNotOperatorWithBooleanType.ts, 2, 3))

// miss assignment operators
~true;
~BOOLEAN;
>BOOLEAN : Symbol(BOOLEAN, Decl(bitwiseNotOperatorWithBooleanType.ts, 2, 3))

~foo();
>foo : Symbol(foo, Decl(bitwiseNotOperatorWithBooleanType.ts, 2, 21))

~true, false;
~objA.a;
>objA.a : Symbol(A.a, Decl(bitwiseNotOperatorWithBooleanType.ts, 6, 9))
>objA : Symbol(objA, Decl(bitwiseNotOperatorWithBooleanType.ts, 14, 3))
>a : Symbol(A.a, Decl(bitwiseNotOperatorWithBooleanType.ts, 6, 9))

~M.n;
>M.n : Symbol(M.n, Decl(bitwiseNotOperatorWithBooleanType.ts, 11, 14))
>M : Symbol(M, Decl(bitwiseNotOperatorWithBooleanType.ts, 9, 1))
>n : Symbol(M.n, Decl(bitwiseNotOperatorWithBooleanType.ts, 11, 14))

