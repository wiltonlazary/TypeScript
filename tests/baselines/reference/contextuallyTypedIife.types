=== tests/cases/conformance/expressions/functions/contextuallyTypedIife.ts ===
// arrow
(jake => { })("build");
>(jake => { })("build") : void
>(jake => { }) : (jake: string) => void
>jake => { } : (jake: string) => void
>jake : string
>"build" : string

// function expression
(function (cats) { })("lol");
>(function (cats) { })("lol") : void
>(function (cats) { }) : (cats: string) => void
>function (cats) { } : (cats: string) => void
>cats : string
>"lol" : string

// Lots of Irritating Superfluous Parentheses
(function (x) { } ("!"));
>(function (x) { } ("!")) : void
>function (x) { } ("!") : void
>function (x) { } : (x: string) => void
>x : string
>"!" : string

((((function (y) { }))))("-");
>((((function (y) { }))))("-") : void
>((((function (y) { })))) : (y: string) => void
>(((function (y) { }))) : (y: string) => void
>((function (y) { })) : (y: string) => void
>(function (y) { }) : (y: string) => void
>function (y) { } : (y: string) => void
>y : string
>"-" : string

// multiple arguments
((a, b, c) => { })("foo", 101, false);
>((a, b, c) => { })("foo", 101, false) : void
>((a, b, c) => { }) : (a: string, b: number, c: boolean) => void
>(a, b, c) => { } : (a: string, b: number, c: boolean) => void
>a : string
>b : number
>c : boolean
>"foo" : string
>101 : number
>false : boolean

// default parameters
((m = 10) => m + 1)(12);
>((m = 10) => m + 1)(12) : number
>((m = 10) => m + 1) : (m?: number) => number
>(m = 10) => m + 1 : (m?: number) => number
>m : number
>10 : number
>m + 1 : number
>m : number
>1 : number
>12 : number

((n = 10) => n + 1)();
>((n = 10) => n + 1)() : number
>((n = 10) => n + 1) : (n?: number) => number
>(n = 10) => n + 1 : (n?: number) => number
>n : number
>10 : number
>n + 1 : number
>n : number
>1 : number

// optional parameters
((j?) => j + 1)(12);
>((j?) => j + 1)(12) : number
>((j?) => j + 1) : (j?: number) => number
>(j?) => j + 1 : (j?: number) => number
>j : number
>j + 1 : number
>j : number
>1 : number
>12 : number

((k?) => k + 1)();
>((k?) => k + 1)() : any
>((k?) => k + 1) : (k?: any) => any
>(k?) => k + 1 : (k?: any) => any
>k : any
>k + 1 : any
>k : any
>1 : number

((l, o?) => l + o)(12); // o should be any
>((l, o?) => l + o)(12) : any
>((l, o?) => l + o) : (l: number, o?: any) => any
>(l, o?) => l + o : (l: number, o?: any) => any
>l : number
>o : any
>l + o : any
>l : number
>o : any
>12 : number

// rest parameters
((...numbers) => numbers.every(n => n > 0))(5,6,7);
>((...numbers) => numbers.every(n => n > 0))(5,6,7) : boolean
>((...numbers) => numbers.every(n => n > 0)) : (...numbers: number[]) => boolean
>(...numbers) => numbers.every(n => n > 0) : (...numbers: number[]) => boolean
>numbers : number[]
>numbers.every(n => n > 0) : boolean
>numbers.every : (callbackfn: (value: number, index: number, array: number[]) => boolean, thisArg?: any) => boolean
>numbers : number[]
>every : (callbackfn: (value: number, index: number, array: number[]) => boolean, thisArg?: any) => boolean
>n => n > 0 : (n: number) => boolean
>n : number
>n > 0 : boolean
>n : number
>0 : number
>5 : number
>6 : number
>7 : number

((...mixed) => mixed.every(n => !!n))(5,'oops','oh no');
>((...mixed) => mixed.every(n => !!n))(5,'oops','oh no') : boolean
>((...mixed) => mixed.every(n => !!n)) : (...mixed: (number | string)[]) => boolean
>(...mixed) => mixed.every(n => !!n) : (...mixed: (number | string)[]) => boolean
>mixed : (number | string)[]
>mixed.every(n => !!n) : boolean
>mixed.every : (callbackfn: (value: number | string, index: number, array: (number | string)[]) => boolean, thisArg?: any) => boolean
>mixed : (number | string)[]
>every : (callbackfn: (value: number | string, index: number, array: (number | string)[]) => boolean, thisArg?: any) => boolean
>n => !!n : (n: number | string) => boolean
>n : number | string
>!!n : boolean
>!n : boolean
>n : number | string
>5 : number
>'oops' : string
>'oh no' : string

((...noNumbers) => noNumbers.some(n => n > 0))();
>((...noNumbers) => noNumbers.some(n => n > 0))() : boolean
>((...noNumbers) => noNumbers.some(n => n > 0)) : (...noNumbers: any[]) => boolean
>(...noNumbers) => noNumbers.some(n => n > 0) : (...noNumbers: any[]) => boolean
>noNumbers : any[]
>noNumbers.some(n => n > 0) : boolean
>noNumbers.some : (callbackfn: (value: any, index: number, array: any[]) => boolean, thisArg?: any) => boolean
>noNumbers : any[]
>some : (callbackfn: (value: any, index: number, array: any[]) => boolean, thisArg?: any) => boolean
>n => n > 0 : (n: any) => boolean
>n : any
>n > 0 : boolean
>n : any
>0 : number

((first, ...rest) => first ? [] : rest.map(n => n > 0))(8,9,10);
>((first, ...rest) => first ? [] : rest.map(n => n > 0))(8,9,10) : boolean[]
>((first, ...rest) => first ? [] : rest.map(n => n > 0)) : (first: number, ...rest: number[]) => boolean[]
>(first, ...rest) => first ? [] : rest.map(n => n > 0) : (first: number, ...rest: number[]) => boolean[]
>first : number
>rest : number[]
>first ? [] : rest.map(n => n > 0) : boolean[]
>first : number
>[] : undefined[]
>rest.map(n => n > 0) : boolean[]
>rest.map : <U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => U[]
>rest : number[]
>map : <U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => U[]
>n => n > 0 : (n: number) => boolean
>n : number
>n > 0 : boolean
>n : number
>0 : number
>8 : number
>9 : number
>10 : number

// destructuring parameters (with defaults too!)
(({ q }) => q)({ q : 13 });
>(({ q }) => q)({ q : 13 }) : number
>(({ q }) => q) : ({q}: { q: number; }) => number
>({ q }) => q : ({q}: { q: number; }) => number
>q : number
>q : number
>{ q : 13 } : { q: number; }
>q : number
>13 : number

(({ p = 14 }) => p)({ p : 15 });
>(({ p = 14 }) => p)({ p : 15 }) : number
>(({ p = 14 }) => p) : ({p}: { p: number; }) => number
>({ p = 14 }) => p : ({p}: { p: number; }) => number
>p : number
>14 : number
>p : number
>{ p : 15 } : { p: number; }
>p : number
>15 : number

(({ r = 17 } = { r: 18 }) => r)({r : 19});
>(({ r = 17 } = { r: 18 }) => r)({r : 19}) : number
>(({ r = 17 } = { r: 18 }) => r) : ({r}?: { r: number; }) => number
>({ r = 17 } = { r: 18 }) => r : ({r}?: { r: number; }) => number
>r : number
>17 : number
>{ r: 18 } : { r: number; }
>r : number
>18 : number
>r : number
>{r : 19} : { r: number; }
>r : number
>19 : number

(({ u = 22 } = { u: 23 }) => u)();
>(({ u = 22 } = { u: 23 }) => u)() : number
>(({ u = 22 } = { u: 23 }) => u) : ({u}?: { u?: number; }) => number
>({ u = 22 } = { u: 23 }) => u : ({u}?: { u?: number; }) => number
>u : number
>22 : number
>{ u: 23 } : { u?: number; }
>u : number
>23 : number
>u : number

// contextually typed parameters.
let twelve = (f => f(12))(i => i);
>twelve : any
>(f => f(12))(i => i) : any
>(f => f(12)) : (f: (i: any) => any) => any
>f => f(12) : (f: (i: any) => any) => any
>f : (i: any) => any
>f(12) : any
>f : (i: any) => any
>12 : number
>i => i : (i: any) => any
>i : any
>i : any

let eleven = (o => o.a(11))({ a: function(n) { return n; } });
>eleven : any
>(o => o.a(11))({ a: function(n) { return n; } }) : any
>(o => o.a(11)) : (o: { a: (n: any) => any; }) => any
>o => o.a(11) : (o: { a: (n: any) => any; }) => any
>o : { a: (n: any) => any; }
>o.a(11) : any
>o.a : (n: any) => any
>o : { a: (n: any) => any; }
>a : (n: any) => any
>11 : number
>{ a: function(n) { return n; } } : { a: (n: any) => any; }
>a : (n: any) => any
>function(n) { return n; } : (n: any) => any
>n : any
>n : any

